name: Int - Deploy Utils to Lambda

on:
  push:
    tags:
      - "util*"
    paths:
      - "utilities/tpds_utils/**"

jobs:
  changed-files:
    name: Get changed files
    runs-on: ubuntu-latest
    outputs:
      utilities_changed: ${{ steps.changed-utilities.outputs.all_changed_files }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch master
        run: git fetch origin main --depth 1

      - name: Get base SHA
        id: base-sha
        run: echo "sha=$(git rev-parse origin/main)" >> $GITHUB_OUTPUT # SHA of master

      - name: Get changed files
        id: changed-utilities
        uses: tj-actions/changed-files@v44
        with:
          base_sha: "${{ steps.base-sha.outputs.sha }}"
          dir_names: true
          dir_names_max_depth: 1
          path: utilities # only get changes in utilities folder

  deploy:
    name: Deploy to Int
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: [changed-files]
    env:
      environment: Int
      bucket: tpg-ds
    steps:
      - name: debug
        run: |
          echo needs.changed-files.outputs.utilities_changed

      # - name: Setup python version 3.11
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.11

      # - name: Checkout
      #   uses: actions/checkout@v4

      # - name: Read version for filename
      #   id: getversion
      #   run: echo "filename=$(cat version.txt).zip" >> $GITHUB_OUTPUT

      # - name: Create layer zip file
      #   run: |
      #     pip install --upgrade pip
      #     python3.11 -m venv create_layer
      #     source create_layer/bin/activate
      #     pip install -r requirements.txt
      #     mkdir python
      #     cp -r create_layer/lib python/
      #     rsync -av --exclude-from='exclude_list.txt' --exclude python --exclude create_layer . python
      #     zip -r ${{ steps.getversion.outputs.filename }} python
      
      # - name: Upload the layer
      #   run: |
      #     S3_key=$environment/layers/${{ matrix.dir }}/${{ steps.getversion.outputs.filename }}
      #     aws s3 cp ${{ steps.getversion.outputs.filename }} s3://$bucket/$S3_key
      #     aws lambda publish-layer-version --layer-name ${{ matrix.dir }} \
      #         --content S3Bucket=$bucket,S3Key=$S3_key \
      #         --compatible-runtimes python3.11 \
      #         --compatible-architectures "arm64"